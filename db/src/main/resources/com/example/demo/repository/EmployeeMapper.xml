<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.EmployeeMapper">
    <insert id="create" useGeneratedKeys="true" keyProperty="entity.employeeId">
        INSERT INTO employee (
          first_name,
          last_name,
          first_name_kana,
          last_name_kana,
          birthday,
          gender,
          tel,
          position_id,
          salary_of_month,
          login_id,
          password,
          token_id,
          created_by,
          created_at,
          updated_by,
          updated_at
        )
        VALUES (
          #{entity.firstName},
          #{entity.lastName},
          #{entity.firstNameKana},
          #{entity.lastNameKana},
          #{entity.birthday},
          #{entity.gender},
          #{entity.tel},
          #{entity.positionId},
          #{entity.salaryOfMonth},
          #{entity.loginId},
          #{entity.password},
          #{entity.tokenId},
          #{entity.createdBy},
          #{entity.createdAt},
          #{entity.updatedBy},
          #{entity.updatedAt}
        )
    </insert>
    <select id="findById" resultType="com.example.demo.entity.Employee">
        SELECT * FROM employee WHERE employee_id = #{employeeId}
    </select>
    <update id="update">
        UPDATE
          employee
        <set>
          first_name = #{entity.firstName},
          last_name = #{entity.lastName},
          first_name_kana = #{entity.firstNameKana},
          last_name_kana = #{entity.lastNameKana},
          tel = #{entity.tel},
          position_id = #{entity.positionId},
          <if test="entity.salaryOfMonth > 0">
            salary_of_month = #{entity.salaryOfMonth},
          </if>
          updated_by = #{entity.updatedBy},
          updated_at = #{entity.updatedAt}
        </set>
        WHERE
          employee_id = #{entity.employeeId}
    </update>
    <update id="updatePasswordAndTokenNullById">
        UPDATE
            employee
        <set>
            password = #{password},
            token = null,
            updated_by = #{updatedBy},
            updated_at = #{now}
        </set>
        WHERE
            employee_id = #{employeeId}
    </update>
    <update id="updateTokenById">
        UPDATE
            employee
        <set>
            token = #{token},
            updated_by = #{loginId},
            updated_at = #{now}
        </set>
        WHERE
            employee_id = #{employeeId}
    </update>
    <delete id="delete">
        DELETE FROM
         employee
        WHERE
          employee_id = #{employeeId}
    </delete>
    <select id="findEmployeeAndSkillById" resultMap="EmployeeAndSkillMap">
        SELECT
          e.employee_id,
          e.first_name,
          e.last_name,
          e.first_name_kana,
          e.last_name_kana,
          e.birthday,
          e.gender,
          e.tel,
          e.position_id,
          es.skill_id,
          e.salary_of_month,
          e.login_id
        FROM
          employee e
        LEFT JOIN
          employee_skill es
        on e.employee_id = es.employee_id
        WHERE e.employee_id = #{employeeId}
    </select>
    <resultMap type="com.example.demo.entity.EmployeeAndSkill" id="EmployeeAndSkillMap">
        <id column="employee_id" property="employeeId"/>
        <result column="first_name" property="firstName" />
        <result column="last_name" property="lastName" />
        <result column="first_name_kana" property="firstNameKana" />
        <result column="last_name_kana" property="lastNameKana" />
        <result column="birthday" property="birthday" />
        <result column="gender" property="gender" />
        <result column="tel" property="tel" />
        <result column="position_id" property="positionId" />
        <result column="salary_of_month" property="salaryOfMonth" />
        <result column="login_id" property="loginId" />
        <collection property="skills" ofType="long">
            <result column="skill_id"/>
        </collection>
    </resultMap>
    <select id="findList" resultType="com.example.demo.entity.EmployeeList">
        SELECT
            e.employee_id,
            e.first_name,
            e.last_name,
            e.birthday,
            e.gender,
            p.position_name
        FROM
            employee e
        LEFT JOIN
            position p
        ON e.position_id = p.position_id
        <where>
            <if test="name != null">
                (
                e.first_name LIKE CONCAT('%', #{name}, '%')
                OR
                e.last_name LIKE CONCAT('%', #{name}, '%')
                )
            </if>
            <if test="kana != null">
                AND (
                e.first_name_kana LIKE CONCAT('%', #{kana}, '%')
                OR
                e.last_name_kana LIKE CONCAT('%', #{kana}, '%')
                )
            </if>
            <if test="gender != null">
                AND e.gender = #{gender}
            </if>
            <if test="positionId != null">
                AND e.position_id = #{positionId}
            </if>
        </where>
        ORDER BY p.display_order, e.employee_id
    </select>
    <select id="findAll" resultType="com.example.demo.entity.Employee">
        <include refid="selectAll"/>
    </select>
    <select id="findByLoginId" resultType="com.example.demo.entity.Employee">
        <include refid="selectAll"/>
        <where>login_id = #{loginId}</where>
    </select>
    <select id="findByTokenId" resultType="com.example.demo.entity.EmployeeRole">
        SELECT e.*, p.role FROM employee e
        INNER JOIN position p
        ON e.position_id = p.position_id
        <where>e.token_id = #{tokenId}</where>
    </select>
    <sql id="selectAll">
        SELECT * FROM employee
    </sql>
</mapper>